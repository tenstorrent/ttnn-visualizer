name: Smoke Tests

on:
  pull_request:
    branches: [ "dev" ]
  push:
    branches: [ "dev" ]
  workflow_dispatch:

env:
  BASE_PATH: /
  NPM_CONFIG_PRODUCTION: false

jobs:
  build-wheel:
    name: Build Python Wheel
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Read .nvmrc
        id: nvm
        run: echo "NODE_VERSION=$(cat .nvmrc)" >> $GITHUB_OUTPUT
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.nvm.outputs.NODE_VERSION }}
          
      - run: npm install -g pnpm@latest-10
      - run: pnpm install
      - run: pnpm run build

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10.16'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build wheel
        run: |
          python -m build --wheel

      - name: Upload wheel as artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-wheel
          path: dist/*.whl

  smoke-test:
    name: Smoke Test (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    needs: build-wheel
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Download wheel artifact
        uses: actions/download-artifact@v4
        with:
          name: python-wheel
          path: dist/
      
      - name: Install wheel and dependencies
        run: |
          python -m pip install --upgrade pip
          # Install the wheel file
          pip install dist/*.whl
          # Install playwright for testing
          pip install playwright
          playwright install --with-deps chromium
      
      - name: Start ttnn-visualizer server in background
        run: |
          # Start the server in the background
          ttnn-visualizer &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          
          # Wait for server to start (max 30 seconds)
          echo "Waiting for server to start..."
          for i in {1..30}; do
            if curl -f http://localhost:8000 >/dev/null 2>&1; then
              echo "Server is running!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "Server failed to start within 30 seconds"
              kill $SERVER_PID 2>/dev/null || true
              exit 1
            fi
            sleep 1
          done
      
      - name: Test server with curl
        run: |
          # Test that we can reach the server
          curl -f http://localhost:8000
          echo "✅ Server responded to curl request"
      
      - name: Run Playwright smoke test
        run: |
          python -c "
import asyncio
from playwright.async_api import async_playwright

async def smoke_test():
    async with async_playwright() as p:
        browser = await p.chromium.launch()
        page = await browser.new_page()
        
        try:
            # Navigate to the app
            await page.goto('http://localhost:8000', timeout=10000)
            
            # Wait for the page to load and check title
            await page.wait_for_load_state('networkidle', timeout=10000)
            title = await page.title()
            print(f'✅ Page loaded successfully. Title: {title}')
            
            # Check if the page contains expected content
            body_text = await page.text_content('body')
            if 'visualizer' in body_text.lower() or 'ttnn' in body_text.lower() or 'tt-nn' in body_text.lower():
                print('✅ Page contains expected content')
            else:
                print('⚠️  Page may not have loaded correctly - no expected content found')
                
        except Exception as e:
            print(f'❌ Smoke test failed: {e}')
            raise
        finally:
            await browser.close()

# Run the test
asyncio.run(smoke_test())
          "
      
      - name: Cleanup
        if: always()
        run: |
          # Kill the server process
          if [ ! -z "$SERVER_PID" ]; then
            kill $SERVER_PID 2>/dev/null || true
          fi
          # Also kill any ttnn-visualizer processes that might be running
          pkill -f "ttnn-visualizer" 2>/dev/null || true
          pkill -f "gunicorn.*ttnn_visualizer" 2>/dev/null || true